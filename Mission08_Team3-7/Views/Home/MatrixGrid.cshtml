@model IEnumerable<Mission08_Team3_7.Models.Task>
@using System.Linq

@{
    ViewData["Title"] = "Covey's Time Management Matrix";

    // Handle null model
    var tasks = Model ?? Enumerable.Empty<Mission08_Team3_7.Models.Task>();
}

<style>
    .matrix-grid {
        display: grid;
        grid-template-columns: repeat(2, 1fr); /* Two columns */
        grid-template-rows: repeat(2, auto); /* Two rows */
        gap: 20px; /* Spacing between quadrants */
        padding: 20px;
    }

    .quadrant {
        border: 1px solid #ddd;
        border-radius: 8px;
        padding: 15px;
        background-color: #f9f9f9;
    }

    .quadrant-header {
        font-size: 1.25rem;
        font-weight: bold;
        margin-bottom: 15px;
        color: white;
        padding: 10px;
        border-radius: 4px;
    }

    .quadrant-I .quadrant-header { background-color: #dc3545; } /* Red */
    .quadrant-II .quadrant-header { background-color: #28a745; } /* Green */
    .quadrant-III .quadrant-header { background-color: #ffc107; } /* Yellow */
    .quadrant-IV .quadrant-header { background-color: #17a2b8; } /* Blue */

    .task-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 10px;
        border-bottom: 1px solid #eee;
    }

    .task-item:last-child {
        border-bottom: none;
    }

    .task-actions {
        display: flex;
        gap: 10px;
    }

    .no-tasks {
        color: #888;
        font-style: italic;
    }
</style>

<div class="matrix-grid">
    <!-- Quadrant I: Important/Urgent -->
    <div class="quadrant quadrant-I">
        <div class="quadrant-header">Quadrant I: Important / Urgent</div>
        <div class="quadrant-body">
            @{
                var q1Tasks = tasks.Where(t => t.Quadrant == 1).ToList();
            }
            @foreach (var task in q1Tasks)
            {
                <div class="task-item">
                    <div>
                        <strong>@task.TaskName</strong>
                        @if (!string.IsNullOrEmpty(task.DueDate))
                        {
                            <span class="text-muted">(Due: @task.DueDate)</span>
                        }
                        <br>
                        <span class="badge badge-primary">@task.Category?.CategoryName</span>
                    </div>
                    <div class="task-actions">
                        <a asp-action="Edit" asp-route-id="@task.TaskId" class="btn btn-sm btn-outline-primary">Edit</a>
                        <form asp-action="Delete" method="post" class="d-inline">
                            <input type="hidden" name="id" value="@task.TaskId" />
                            <button type="submit" class="btn btn-sm btn-outline-danger">Delete</button>
                        </form>
                        <form asp-action="ToggleCompleted" method="post" class="d-inline">
                            <input type="hidden" name="id" value="@task.TaskId" />
                            <button type="submit" class="btn btn-sm btn-success">
                                @(task.Completed ? "Undo" : "✓")
                            </button>
                        </form>
                    </div>
                </div>
            }
            @if (!q1Tasks.Any())
            {
                <p class="no-tasks">No tasks in this quadrant</p>
            }
        </div>
    </div>

    <!-- Quadrant II: Important/Not Urgent -->
    <div class="quadrant quadrant-II">
        <div class="quadrant-header">Quadrant II: Important / Not Urgent</div>
        <div class="quadrant-body">
            @{
                var q2Tasks = tasks.Where(t => t.Quadrant == 2).ToList();
            }
            @foreach (var task in q2Tasks)
            {
                <div class="task-item">
                    <div>
                        <strong>@task.TaskName</strong>
                        @if (!string.IsNullOrEmpty(task.DueDate))
                        {
                            <span class="text-muted">(Due: @task.DueDate)</span>
                        }
                        <br>
                        <span class="badge badge-primary">@task.Category?.CategoryName</span>
                    </div>
                    <div class="task-actions">
                        <a asp-action="Edit" asp-route-id="@task.TaskId" class="btn btn-sm btn-outline-primary">Edit</a>
                        <form asp-action="Delete" method="post" class="d-inline">
                            <input type="hidden" name="id" value="@task.TaskId" />
                            <button type="submit" class="btn btn-sm btn-outline-danger">Delete</button>
                        </form>
                        <form asp-action="ToggleCompleted" method="post" class="d-inline">
                            <input type="hidden" name="id" value="@task.TaskId" />
                            <button type="submit" class="btn btn-sm btn-success">
                                @(task.Completed ? "Undo" : "✓")
                            </button>
                        </form>
                    </div>
                </div>
            }
            @if (!q2Tasks.Any())
            {
                <p class="no-tasks">No tasks in this quadrant</p>
            }
        </div>
    </div>

    <!-- Quadrant III: Not Important/Urgent -->
    <div class="quadrant quadrant-III">
        <div class="quadrant-header">Quadrant III: Not Important / Urgent</div>
        <div class="quadrant-body">
            @{
                var q3Tasks = tasks.Where(t => t.Quadrant == 3).ToList();
            }
            @foreach (var task in q3Tasks)
            {
                <div class="task-item">
                    <div>
                        <strong>@task.TaskName</strong>
                        @if (!string.IsNullOrEmpty(task.DueDate))
                        {
                            <span class="text-muted">(Due: @task.DueDate)</span>
                        }
                        <br>
                        <span class="badge badge-primary">@task.Category?.CategoryName</span>
                    </div>
                    <div class="task-actions">
                        <a asp-action="Edit" asp-route-id="@task.TaskId" class="btn btn-sm btn-outline-primary">Edit</a>
                        <form asp-action="Delete" method="post" class="d-inline">
                            <input type="hidden" name="id" value="@task.TaskId" />
                            <button type="submit" class="btn btn-sm btn-outline-danger">Delete</button>
                        </form>
                        <form asp-action="ToggleCompleted" method="post" class="d-inline">
                            <input type="hidden" name="id" value="@task.TaskId" />
                            <button type="submit" class="btn btn-sm btn-success">
                                @(task.Completed ? "Undo" : "✓")
                            </button>
                        </form>
                    </div>
                </div>
            }
            @if (!q3Tasks.Any())
            {
                <p class="no-tasks">No tasks in this quadrant</p>
            }
        </div>
    </div>

    <!-- Quadrant IV: Not Important/Not Urgent -->
    <div class="quadrant quadrant-IV">
        <div class="quadrant-header">Quadrant IV: Not Important / Not Urgent</div>
        <div class="quadrant-body">
            @{
                var q4Tasks = tasks.Where(t => t.Quadrant == 4).ToList();
            }
            @foreach (var task in q4Tasks)
            {
                <div class="task-item">
                    <div>
                        <strong>@task.TaskName</strong>
                        @if (!string.IsNullOrEmpty(task.DueDate))
                        {
                            <span class="text-muted">(Due: @task.DueDate)</span>
                        }
                        <br>
                        <span class="badge badge-primary">@task.Category?.CategoryName</span>
                    </div>
                    <div class="task-actions">
                        <a asp-action="Edit" asp-route-id="@task.TaskId" class="btn btn-sm btn-outline-primary">Edit</a>
                        <form asp-action="Delete" method="post" class="d-inline">
                            <input type="hidden" name="id" value="@task.TaskId" />
                            <button type="submit" class="btn btn-sm btn-outline-danger">Delete</button>
                        </form>
                        <form asp-action="ToggleCompleted" method="post" class="d-inline">
                            <input type="hidden" name="id" value="@task.TaskId" />
                            <button type="submit" class="btn btn-sm btn-success">
                                @(task.Completed ? "Undo" : "✓")
                            </button>
                        </form>
                    </div>
                </div>
            }
            @if (!q4Tasks.Any())
            {
                <p class="no-tasks">No tasks in this quadrant</p>
            }
        </div>
    </div>
</div>

<div class="text-center mt-4">
    <a asp-action="Create" class="btn btn-primary">Add New Task</a>
</div>